name: Update Profile Stats

on:
  schedule:
    # Run at 12:00 AM UTC every day
    - cron: '0 0 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-stats.yml'

jobs:
  update-readme:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history for better merge handling
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Generate Dynamic Content
        id: dynamic-content
        run: |
          # Get current date
          echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          
          # Create a timestamp for cache busting
          echo "timestamp=$(date +'%s')" >> $GITHUB_OUTPUT
          
          # Day of year for unique daily seed
          echo "day_of_year=$(date +'%j')" >> $GITHUB_OUTPUT
          
      - name: Update README with Fresh Stats
        run: |
          python - <<'EOF'
          import re
          import os
          from datetime import datetime
          
          # Read the current README
          with open('README.md', 'r') as f:
              content = f.read()
          
          # Get timestamp for cache busting
          timestamp = os.environ.get('TIMESTAMP', '')
          
          # Update all stats URLs with cache-busting parameter
          # This forces GitHub to refresh the images
          
          # Update GitHub Stats
          content = re.sub(
              r'(github-readme-stats\.vercel\.app/api\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          # Update Top Languages
          content = re.sub(
              r'(github-readme-stats\.vercel\.app/api/top-langs/\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          # Update Streak Stats
          content = re.sub(
              r'(github-readme-streak-stats\.herokuapp\.com/\?user=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          # Update Profile Summary Cards
          content = re.sub(
              r'(github-profile-summary-cards\.vercel\.app/api/cards/profile-details\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          # Update Trophy
          content = re.sub(
              r'(github-profile-trophy\.vercel\.app/\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          # Add/Update last updated timestamp
          update_line = f"\n<!-- Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')} -->\n"
          
          # Check if update line exists
          if '<!-- Last updated:' in content:
              content = re.sub(
                  r'<!-- Last updated:.*?-->',
                  f"<!-- Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')} -->",
                  content
              )
          else:
              # Add it at the end
              content = content.rstrip() + '\n' + update_line
          
          # Write the updated content
          with open('README.md', 'w') as f:
              f.write(content)
          
          print("README.md updated successfully with fresh stats URLs")
          EOF
        env:
          TIMESTAMP: ${{ steps.dynamic-content.outputs.timestamp }}
          
      - name: Commit and Push Changes
        run: |
          git config --local user.email "tyson.cung@gmail.com"
          git config --local user.name "Tyson Cung"
          
          # Check if README has changes
          if git diff README.md | head -1; then
            # Stage the changes
            git add README.md
            
            # Check if there are actually staged changes
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              # Commit the changes
              git commit -m "ðŸ”„ Update profile stats

          - Refreshed GitHub statistics
          - Updated contribution graphs
          - Refreshed activity metrics
          - Cache busted all stat images
          
          [skip ci]"
              
              # Store timestamp for use in retry logic
              export TIMESTAMP="${TIMESTAMP}"
              
              # Push with retry logic in case of concurrent updates  
              max_attempts=3
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                echo "Push attempt $attempt of $max_attempts"
                if git push; then
                  echo "Push successful"
                  break
                else
                  echo "Push failed, pulling latest changes and retrying..."
                  # Fetch the latest changes
                  git fetch origin main
                  
                  # Try to rebase, but if it fails due to conflicts, abort and retry with merge
                  if ! git rebase origin/main; then
                    echo "Rebase failed, aborting and trying merge strategy"
                    git rebase --abort || true
                    
                    # Pull with merge strategy instead
                    git pull origin main --no-rebase --strategy-option=theirs
                    
                    # Re-run the Python script to ensure our changes are applied
                    python - <<'EOF'
          import re
          import os
          from datetime import datetime
          
          # Read the current README
          with open('README.md', 'r') as f:
              content = f.read()
          
          # Get timestamp for cache busting
          timestamp = os.environ.get('TIMESTAMP', '')
          
          # Update all stats URLs with cache-busting parameter
          content = re.sub(
              r'(github-readme-stats\.vercel\.app/api\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          content = re.sub(
              r'(github-readme-stats\.vercel\.app/api/top-langs/\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          content = re.sub(
              r'(github-readme-streak-stats\.herokuapp\.com/\?user=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          content = re.sub(
              r'(github-profile-summary-cards\.vercel\.app/api/cards/profile-details\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          content = re.sub(
              r'(github-profile-trophy\.vercel\.app/\?username=tysoncung[^"]*)',
              lambda m: m.group(1).split('&cache')[0] + f'&cache={timestamp}',
              content
          )
          
          # Update timestamp
          update_line = f"<!-- Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')} -->"
          if '<!-- Last updated:' in content:
              content = re.sub(
                  r'<!-- Last updated:.*?-->',
                  update_line,
                  content
              )
          else:
              content = content.rstrip() + '\n' + update_line + '\n'
          
          # Write the updated content
          with open('README.md', 'w') as f:
              f.write(content)
          
          print("README.md re-updated after merge")
          EOF
                    
                    # Stage and amend the merge commit
                    git add README.md
                    git commit --amend --no-edit
                  fi
                  
                  attempt=$((attempt + 1))
                  if [ $attempt -le $max_attempts ]; then
                    sleep 2
                  fi
                fi
              done
              
              if [ $attempt -gt $max_attempts ]; then
                echo "Failed to push after $max_attempts attempts"
                exit 1
              fi
            fi
          else
            echo "No changes to README.md"
          fi
          
      - name: Purge README Cache
        run: |
          # Purge GitHub's image cache by making a request to the README
          curl -s "https://github.com/tysoncung/tysoncung/blob/main/README.md" > /dev/null
          
          # Also trigger a purge of the raw content
          curl -s "https://raw.githubusercontent.com/tysoncung/tysoncung/main/README.md" > /dev/null
          
          echo "Cache purge requests sent"