name: Update Contribution Stats

on:
  schedule:
    # Run at 12:30 AM UTC every day (30 mins after main stats update)
    - cron: '30 0 * * *'
  workflow_dispatch: # Allow manual trigger
  push:
    branches:
      - main
    paths:
      - '.github/workflows/update-contributions.yml'

jobs:
  update-contributions:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install Dependencies
        run: |
          pip install requests PyGithub python-dateutil
          
      - name: Fetch and Update Contribution Stats
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python - <<'EOF'
          import os
          import re
          import requests
          from datetime import datetime, timedelta
          from github import Github
          from dateutil import parser
          
          # Initialize GitHub API
          g = Github(os.environ['GITHUB_TOKEN'])
          user = g.get_user('tysoncung')
          
          # Get contribution data
          username = 'tysoncung'
          
          # Function to get contribution streak
          def get_contribution_streak():
              # Fetch contribution graph data from GitHub's GraphQL API
              query = """
              query($username: String!) {
                user(login: $username) {
                  contributionsCollection {
                    contributionCalendar {
                      totalContributions
                      weeks {
                        contributionDays {
                          contributionCount
                          date
                        }
                      }
                    }
                  }
                }
              }
              """
              
              headers = {
                  'Authorization': f'Bearer {os.environ["GITHUB_TOKEN"]}',
                  'Content-Type': 'application/json'
              }
              
              response = requests.post('https://api.github.com/graphql', 
                                     json={'query': query, 'variables': {'username': username}},
                                     headers=headers)
              
              if response.status_code == 200:
                  data = response.json()
                  weeks = data['data']['user']['contributionsCollection']['contributionCalendar']['weeks']
                  
                  # Calculate current streak
                  streak = 0
                  today = datetime.now().date()
                  
                  # Flatten contribution days
                  all_days = []
                  for week in weeks:
                      all_days.extend(week['contributionDays'])
                  
                  # Sort by date (most recent first)
                  all_days.sort(key=lambda x: x['date'], reverse=True)
                  
                  # Count streak
                  for day in all_days:
                      day_date = parser.parse(day['date']).date()
                      if day_date > today:
                          continue
                      if day['contributionCount'] > 0:
                          streak += 1
                      else:
                          # Check if it's today (allow for timezone differences)
                          if (today - day_date).days <= 1:
                              continue
                          else:
                              break
                  
                  total_contributions = data['data']['user']['contributionsCollection']['contributionCalendar']['totalContributions']
                  return streak, total_contributions
              return 0, 0
          
          # Get PR stats
          def get_pr_stats():
              # Search for PRs created by user
              prs = g.search_issues(f'author:{username} type:pr created:>{datetime.now().year}-01-01')
              
              total_prs = 0
              merged_prs = 0
              open_prs = 0
              
              for pr in prs:
                  total_prs += 1
                  if pr.state == 'closed' and pr.pull_request.merged_at:
                      merged_prs += 1
                  elif pr.state == 'open':
                      open_prs += 1
              
              return total_prs, merged_prs, open_prs
          
          # Get repository stats
          def get_repo_stats():
              repos = user.get_repos()
              total_repos = repos.totalCount
              
              # Count repos created this month
              this_month = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
              monthly_repos = sum(1 for repo in repos if repo.created_at >= this_month)
              
              return total_repos, monthly_repos
          
          # Get issue stats
          def get_issue_stats():
              issues = g.search_issues(f'author:{username} type:issue created:>{datetime.now().year}-01-01')
              return issues.totalCount
          
          # Fetch all stats
          streak, total_contributions = get_contribution_streak()
          total_prs, merged_prs, open_prs = get_pr_stats()
          total_repos, monthly_repos = get_repo_stats()
          total_issues = get_issue_stats()
          
          # Calculate dates for streak display
          if streak > 0:
              today = datetime.now().date()
              streak_start = today - timedelta(days=streak-1)
              streak_dates = f"{streak_start.strftime('%b %d')} - {today.strftime('%b %d')}"
          else:
              streak_dates = "No active streak"
          
          # Create the stats content
          stats_content = f"""<!-- STATS:START -->
## üìä Current Stats 
- üî• **{streak}-day streak** {'achieved! (' + streak_dates + ')' if streak > 0 else ''}
- üìù **{total_contributions} contributions** this year
- üéØ **{total_prs} PRs** opened ({merged_prs} merged ‚úÖ, {open_prs} pending)
- üèÜ **{total_repos} repositories** total ({monthly_repos} created this month)
- üêõ **{total_issues} issues** opened
- üìö **Daily learning** maintained
- {'üéâ **Milestone**: ' + str(streak) + '-day contribution streak!' if streak >= 7 else ''}
- üöÄ **Latest activity**: Updated {datetime.now().strftime('%Y-%m-%d')}
<!-- STATS:END -->"""
          
          # Read the current README
          with open('README.md', 'r') as f:
              content = f.read()
          
          # Update the stats section
          if '<!-- STATS:START -->' in content and '<!-- STATS:END -->' in content:
              # Replace existing stats
              pattern = r'<!-- STATS:START -->.*?<!-- STATS:END -->'
              content = re.sub(pattern, stats_content, content, flags=re.DOTALL)
          else:
              # Add stats section after the "About Me" section if it doesn't exist
              about_me_end = content.find('\n## ', content.find('## üöÄ About Me') + 1)
              if about_me_end != -1:
                  content = content[:about_me_end] + '\n' + stats_content + '\n' + content[about_me_end:]
          
          # Write the updated content
          with open('README.md', 'w') as f:
              f.write(content)
          
          print(f"‚úÖ Stats updated successfully!")
          print(f"   - Streak: {streak} days")
          print(f"   - Contributions: {total_contributions}")
          print(f"   - PRs: {total_prs} ({merged_prs} merged, {open_prs} open)")
          print(f"   - Repos: {total_repos} ({monthly_repos} this month)")
          EOF
          
      - name: Commit and Push Changes
        run: |
          git config --local user.email "tyson.cung@gmail.com"
          git config --local user.name "Tyson Cung"
          
          # Check for changes
          if git diff README.md | head -1; then
            git add README.md
            
            if git diff --staged --quiet; then
              echo "No changes to commit"
            else
              # Get current date
              DATE=$(date +'%Y-%m-%d')
              
              git commit -m "üìä Update contribution stats for $DATE
          
          - Updated streak counter
          - Refreshed PR statistics  
          - Updated repository count
          - Latest contribution data
          
          [skip ci]"
              
              # Push with retry logic
              max_attempts=3
              attempt=1
              while [ $attempt -le $max_attempts ]; do
                echo "Push attempt $attempt of $max_attempts"
                if git push; then
                  echo "‚úÖ Push successful"
                  break
                else
                  echo "‚ö†Ô∏è Push failed, pulling and retrying..."
                  git pull --rebase origin main
                  attempt=$((attempt + 1))
                  sleep 2
                fi
              done
            fi
          else
            echo "No changes to README.md"
          fi